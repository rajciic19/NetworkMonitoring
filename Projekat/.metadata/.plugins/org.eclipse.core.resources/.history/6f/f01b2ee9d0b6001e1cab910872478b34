package ru210540d;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.io.IOException;
import java.net.SocketException;

import org.snmp4j.CommunityTarget;
import org.snmp4j.Snmp;
import org.snmp4j.TransportMapping;
import org.snmp4j.mp.SnmpConstants;

import org.snmp4j.smi.Address;
import org.snmp4j.smi.GenericAddress;
import org.snmp4j.smi.OctetString;

import org.snmp4j.transport.DefaultUdpTransportMapping;

import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.SwingUtilities;

import org.snmp4j.smi.*;
import org.snmp4j.util.*;


import java.util.List;

public class V4 extends JFrame{

	OID[] oid_array = new OID[9];
	
	private JCheckBox r1CheckBox, r2CheckBox, r3CheckBox;
    private ButtonGroup routerGroup;
	
	
	public static String comm="si2019";
	
	public static String r1="192.168.10.1";
	public static String r2="192.168.20.1";
	public static String r3="192.168.30.1";
	
	public static int port = 161;
	public static int l_port = 1620;
	
	OID bgpOID = new OID("1.3.6.1.2.1.15");
	
	Snmp snmp=null;
	CommunityTarget target = new CommunityTarget();
	
	private JTextArea textArea;
	
	public V4(JFrame frame) throws IOException {
		
		
		refreshData(frame);

	    setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	    setLayout(new BorderLayout());

	    // Define column names for the table
	    String[] columnNames = {"ID", "STATE", "VERSION", "IP_ADDRESS", "AS", "RECEIVED", "SENT", "KEEPALIVE", "ELAPSED"};

	    // Initialize table data (example data, you need to replace this with actual data)
	    Object[][] data=new Object[2][9]; // Replace {} with your data
	    
	    data[0][0]=1;
	    data[0][1]=2;
	   

	    // Create the table with the data and column names
	    JTable table = new JTable(data, columnNames);
	    table.setPreferredScrollableViewportSize(new Dimension(500, 70));
	    table.setFillsViewportHeight(true);

	    // Add the table to a scroll pane
	    JScrollPane scrollPane = new JScrollPane(table);

	    // Add the scroll pane to the frame
	    add(scrollPane, BorderLayout.CENTER);
	    
	    JPanel routerPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));
	    initializeRouterCheckBoxes(routerPanel);

	    textArea = new JTextArea(5, 20);
	    textArea.setEditable(false);
	    textArea.setBackground(Color.BLACK);
	    textArea.setForeground(Color.WHITE);
	    textArea.setAlignmentX(Component.CENTER_ALIGNMENT);

	    JPanel containerPanel = new JPanel();
	    containerPanel.setLayout(new BoxLayout(containerPanel, BoxLayout.Y_AXIS));
	    containerPanel.setBackground(Color.BLACK);
	    containerPanel.add(routerPanel);
	    containerPanel.add(Box.createVerticalStrut(50));
	    containerPanel.add(textArea);

	    add(containerPanel, BorderLayout.NORTH);

	    pack();
	    setLocationRelativeTo(null);
	    setVisible(true);

	}
	
	/*private void addButtons(JPanel panel) {
	    String[] buttonLabels = {"ID", "STATE", "VERSION", "IP_ADDRESS", "AS", "RECEIVED", "SENT", "KEEPALIVE", "ELAPSED"};
	    for (int i = 0; i < buttonLabels.length; i++) {
	        JButton button = new JButton(buttonLabels[i]);
	        button.addActionListener(new ButtonClickListener(oid_array[i])); 
	        panel.add(button);
	    }
	}*/
	
	private void addLabels(JPanel panel) {
	    String[] labels = {"ID", "STATE", "VERSION", "IP_ADDRESS", "AS", "RECEIVED", "SENT", "KEEPALIVE", "ELAPSED"};
	    for (int i = 0; i < labels.length; i++) {
	        JLabel label = new JLabel(labels[i]);
	        label.setForeground(Color.WHITE);
	        //button.addActionListener(new ButtonClickListener(oid_array[i])); 
	        panel.add(label);
	    }
	}
	
	private class ButtonClickListener implements ActionListener {
	    private OID oid;

	    public ButtonClickListener(OID oid) {
	        this.oid = oid;
	    }

	    @Override
	    public void actionPerformed(ActionEvent e) {
	        JButton source = (JButton) e.getSource();

	        TreeUtils treeUtils = new TreeUtils(snmp, new DefaultPDUFactory());
	        List<TreeEvent> events = treeUtils.getSubtree(target, oid);

	        if(events == null || events.size() == 0) {
	            System.out.println("Greska");
	            return;
	        }
	        textArea.setText("");
	        for(TreeEvent event: events) {
	            VariableBinding[] varBindings = event.getVariableBindings();
	            if(varBindings != null && varBindings.length > 0) {
	                for (VariableBinding varBinding : varBindings) {
	                    if ((varBinding.getOid()).startsWith(oid)) {
	                    	
	                        String value = varBinding.getVariable().toString();
	                        System.out.println("Vrednost: " + value); 
	                        textArea.append("Vrednost: " + value + "\n"); 
	                    }
	                }
	            }
	        }
	    }
			
	        
	}
	private void initializeRouterCheckBoxes(JPanel panel) {
		panel.setBackground(Color.BLACK);
		
        r1CheckBox = new JCheckBox("R1");
        r2CheckBox = new JCheckBox("R2");
        r3CheckBox = new JCheckBox("R3");

        routerGroup = new ButtonGroup();
        routerGroup.add(r1CheckBox);
        routerGroup.add(r2CheckBox);
        routerGroup.add(r3CheckBox);

        ItemListener routerListener = new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                if (r1CheckBox.isSelected()) {
                    target.setAddress(GenericAddress.parse("udp:" + r1 + "/161"));
                } else if (r2CheckBox.isSelected()) {
                    target.setAddress(GenericAddress.parse("udp:" + r2 + "/161"));
                } else if (r3CheckBox.isSelected()) {
                    target.setAddress(GenericAddress.parse("udp:" + r3 + "/161"));
                }
            }
        };

        r1CheckBox.addItemListener(routerListener);
        r2CheckBox.addItemListener(routerListener);
        r3CheckBox.addItemListener(routerListener);

        panel.add(r1CheckBox);
        panel.add(r2CheckBox);
        panel.add(r3CheckBox);
    }
	
	 
	public static void main(String[] args) {
	     
	 }

 	public void refreshData(JFrame frame) throws IOException {
		oid_array[0] = new OID(".1.3.6.1.2.1.15.3.1.1"); //bgpPeerIdentifier
		oid_array[1] = new OID(".1.3.6.1.2.1.15.3.1.2"); //bgpPeerState
		oid_array[2] = new OID(".1.3.6.1.2.1.15.3.1.4"); //bgpPeerNegotiatedVersion, 4
		oid_array[3] = new OID(".1.3.6.1.2.1.15.3.1.7"); //bgpPeerRemoteAddr
		//oid_array[4] = new OID(".1.3.6.1.2.1.15.3.1.8"); //bgpPeerRemotePort
		oid_array[4] = new OID(".1.3.6.1.2.1.15.3.1.9"); //bgpPeerRemoteAs
		oid_array[5] = new OID(".1.3.6.1.2.1.15.3.1.10"); //bgpPeerInUpdates
		oid_array[6] = new OID(".1.3.6.1.2.1.15.3.1.11"); //bgpPeerOutUpdates
		oid_array[7] = new OID(".1.3.6.1.2.1.15.3.1.19"); //bgpPeerKeepAlive
		oid_array[8] = new OID(".1.3.6.1.2.1.15.3.1.24"); //bgpPeerInUpdateElapsedTime
		
		Address targetAddress = GenericAddress.parse("udp:192.168.10.1/161");
		TransportMapping transport=null;
		try {
			transport = new DefaultUdpTransportMapping();
			snmp = new Snmp(transport);
		} 
		catch (SocketException e) {
			e.printStackTrace();
		}
		
		target.setCommunity(new OctetString(comm));
		target.setAddress(targetAddress);
		target.setVersion(SnmpConstants.version1);
		target.setTimeout(1000);
		target.setRetries(3);
		
		transport.listen();
		
	}
}

package ru210540d;

import java.awt.*;
import java.io.IOException;
import java.net.SocketException;

import org.snmp4j.CommunityTarget;
import org.snmp4j.Snmp;
import org.snmp4j.TransportMapping;
import org.snmp4j.event.ResponseEvent;
import org.snmp4j.mp.MPv3;
import org.snmp4j.mp.SnmpConstants;
import org.snmp4j.security.SecurityModels;
import org.snmp4j.security.SecurityProtocols;
import org.snmp4j.security.USM;
import org.snmp4j.smi.Address;
import org.snmp4j.smi.GenericAddress;
import org.snmp4j.smi.OctetString;
import org.snmp4j.smi.UdpAddress;
import org.snmp4j.transport.DefaultUdpTransportMapping;

import javax.swing.JFrame;

import org.snmp4j.*;
import org.snmp4j.smi.*;
import org.snmp4j.util.*;

import java.util.List;

public class V4 extends JFrame {
	
	//Identifikator suseda
	//● stanje BGP sesije sa susedom (ime stanja u mašini stanja)
	//● verzija BGP koja se koristi
	//● IP adresa suseda
	//● Autonomni sistem u kojem je sused
	//● Broj primljenih update poruka
	//● Broj poslatih update poruka po susedu
	//● Keepalive vreme
	//● Elapsed time od kako je dobijen poslednji update od svih suseda
	
	
	OID[] oid_array;
	
	
	public static String comm="si2019";
	
	public static String r1="192.168.10.1";
	public static String r2="192.168.20.1";
	public static String r3="192.168.30.1";
	
	public static int port = 161;
	public static int l_port = 1620;
	
	OID bgpOID = new OID("1.3.6.1.2.1.15");
	
	Snmp snmp=null;
	CommunityTarget target = new CommunityTarget();
	
	public V4() throws IOException {
		
		oid_array[0] = new OID(".1.3.6.1.2.1.15.3.1.1");
		oid_array[1] = new OID(".1.3.6.1.2.1.15.3.1.1");
		oid_array[2] = new OID(".1.3.6.1.2.1.15.3.1.1");
		oid_array[3] = new OID(".1.3.6.1.2.1.15.3.1.1");
		oid_array[4] = new OID(".1.3.6.1.2.1.15.3.1.1");
		oid_array[5] = new OID(".1.3.6.1.2.1.15.3.1.1");
		oid_array[6] = new OID(".1.3.6.1.2.1.15.3.1.1");
		oid_array[7] = new OID(".1.3.6.1.2.1.15.3.1.1");
		
		
		Address targetAddress = GenericAddress.parse("udp:192.168.10.1/161");
		TransportMapping transport=null;
		try {
			transport = new DefaultUdpTransportMapping();
			snmp = new Snmp(transport);
		} 
		catch (SocketException e) {
			e.printStackTrace();
		}
		
		
		target.setCommunity(new OctetString(comm));
		target.setAddress(targetAddress);
		target.setVersion(SnmpConstants.version2c);
		target.setTimeout(1000);
		target.setRetries(3);
		
		transport.listen();
	
		TreeUtils treeUtils = new TreeUtils(snmp, new DefaultPDUFactory());
		List<TreeEvent> events = treeUtils.getSubtree(target, bgpOID);
		
		if(events == null || events.size()==0) {
			System.out.println("Greska");
			return;
		}
		
		for(TreeEvent event: events) {
			 VariableBinding[] varBindings = event.getVariableBindings();
		}
		
		
		setSize(200,200);
		Button b = new Button("b");
		
		add(b);
	}
}

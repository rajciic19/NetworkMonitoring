package ru210540d;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.net.SocketException;

import org.snmp4j.CommunityTarget;
import org.snmp4j.Snmp;
import org.snmp4j.TransportMapping;
import org.snmp4j.event.ResponseEvent;
import org.snmp4j.mp.MPv3;
import org.snmp4j.mp.SnmpConstants;
import org.snmp4j.security.SecurityModels;
import org.snmp4j.security.SecurityProtocols;
import org.snmp4j.security.USM;
import org.snmp4j.smi.Address;
import org.snmp4j.smi.GenericAddress;
import org.snmp4j.smi.OctetString;
import org.snmp4j.smi.UdpAddress;
import org.snmp4j.transport.DefaultUdpTransportMapping;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JTextArea;
import javax.swing.SwingUtilities;

import org.snmp4j.*;
import org.snmp4j.smi.*;
import org.snmp4j.util.*;

import java.util.List;

public class V4 extends JFrame {

	OID[] oid_array = new OID[10];
	
	
	public static String comm="si2019";
	
	public static String r1="192.168.10.1";
	public static String r2="192.168.20.1";
	public static String r3="192.168.30.1";
	
	public static int port = 161;
	public static int l_port = 1620;
	
	OID bgpOID = new OID("1.3.6.1.2.1.15");
	
	Snmp snmp=null;
	CommunityTarget target = new CommunityTarget();
	
	private JTextArea textArea;
	
	public V4() throws IOException {
		
		oid_array[0] = new OID(".1.3.6.1.2.1.15.3.1.1"); //bgpPeerIdentifier
		oid_array[1] = new OID(".1.3.6.1.2.1.15.3.1.2"); //bgpPeerState
		oid_array[2] = new OID(".1.3.6.1.2.1.15.3.1.4"); //bgpPeerNegotiatedVersion, 4
		oid_array[3] = new OID(".1.3.6.1.2.1.15.3.1.7"); //bgpPeerRemoteAddr
		oid_array[4] = new OID(".1.3.6.1.2.1.15.3.1.8"); //bgpPeerRemotePort
		oid_array[5] = new OID(".1.3.6.1.2.1.15.3.1.9"); //bgpPeerRemoteAs
		oid_array[6] = new OID(".1.3.6.1.2.1.15.3.1.10"); //bgpPeerInUpdates
		oid_array[7] = new OID(".1.3.6.1.2.1.15.3.1.1"); //bgpPeerOutUpdates
		oid_array[8] = new OID(".1.3.6.1.2.1.15.3.1.19"); //bgpPeerKeepAlive
		oid_array[9] = new OID(".1.3.6.1.2.1.15.3.1.24"); //bgpPeerInUpdateElapsedTime
		
		Address targetAddress = GenericAddress.parse("udp:192.168.10.1/161");
		TransportMapping transport=null;
		try {
			transport = new DefaultUdpTransportMapping();
			snmp = new Snmp(transport);
		} 
		catch (SocketException e) {
			e.printStackTrace();
		}
		
		
		target.setCommunity(new OctetString(comm));
		target.setAddress(targetAddress);
		target.setVersion(SnmpConstants.version2c);
		target.setTimeout(1000);
		target.setRetries(3);
		
		transport.listen();
	
		TreeUtils treeUtils = new TreeUtils(snmp, new DefaultPDUFactory());
		List<TreeEvent> events = treeUtils.getSubtree(target, bgpOID);
		
		if(events == null || events.size()==0) {
			System.out.println("Greska");
			return;
		}
		
		for(TreeEvent event: events) {
			 VariableBinding[] varBindings = event.getVariableBindings();
		}
		

		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	    setLayout(new BorderLayout()); 

	    JPanel buttonPanel = new JPanel(new FlowLayout());
	    buttonPanel.setBackground(Color.BLACK);
	    addButtons(buttonPanel);

	    textArea = new JTextArea();
	    textArea.setEditable(false);
	    textArea.setBackground(Color.BLACK);
	    textArea.setForeground(Color.WHITE);

	    add(buttonPanel, BorderLayout.NORTH); 
	    add(textArea, BorderLayout.CENTER);
	    
	    buttonPanel.setPreferredSize(new Dimension(buttonPanel.getPreferredSize().width, 400));

	    setSize(new Dimension(600, 400));

	    pack();
	    setLocationRelativeTo(null);
	    setVisible(true);
	}
	
	private void addButtons(JPanel panel) {
	    String[] buttonLabels = {"ID", "STATE", "VERSION", "IP_ADDRESS", "AS", "RECEIVED", "SENT", "KEEPALIVE", "ELAPSED"};
	    for (int i = 0; i < buttonLabels.length; i++) {
	        JButton button = new JButton(buttonLabels[i]);
	        button.addActionListener(new ButtonClickListener(oid_array[i])); 
	        panel.add(button);
	    }
	}
	
	private class ButtonClickListener implements ActionListener {
	    private OID oid;

	    public ButtonClickListener(OID oid) {
	        this.oid = oid;
	    }

	    @Override
	    public void actionPerformed(ActionEvent e) {
	        JButton source = (JButton) e.getSource();
	        String buttonText = source.getText();
	        textArea.setText("Text for " + buttonText + " OID: " + oid.toString());
	    }
	}
	 
	 public static void main(String[] args) {
	        SwingUtilities.invokeLater(() -> {
				try {
					new V4();
				} catch (IOException e) {
					e.printStackTrace();
				}
			});
    }
}
